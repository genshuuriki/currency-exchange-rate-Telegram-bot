import telebot
from telebot import types
from main import get_exchange_rates, get_exchange_rates_for_date, format_rates, search_currency

API_KEY = 'your_api_key_here'
bot = telebot.TeleBot(API_KEY)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    button1 = types.KeyboardButton(text="üíµ –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    button2 = types.KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –≤–∞–ª—é—Ç—É")
    keyboard.add(button1, button2)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id,
                     '–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –±–∞–Ω–∫–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏.',
                     reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.message_handler(func=lambda message: message.text == "üíµ –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
def handle_get_rates(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞", callback_data="current_date_rates")
    button2 = types.InlineKeyboardButton(text="–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞", callback_data="specific_date_rates")
    keyboard.add(button1, button2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data in ["current_date_rates", "specific_date_rates"])
def handle_date_selection(call):
    if call.data == "current_date_rates":
        date_text, rates = get_exchange_rates()
    elif call.data == "specific_date_rates":
        user_states[call.message.chat.id] = 'waiting_for_date'
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy. –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ 01.07.1992.\n–ü—Ä–∏–º–µ—Ä: 31.12.2023')
        return

    if not date_text or not rates:
        bot.send_message(call.message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        return

    response = format_rates(date_text, rates)
    bot.send_message(call.message.chat.id, response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_date')
def handle_date_input(message: types.Message):
    date_text, rates = get_exchange_rates_for_date(message.text.strip())

    if date_text is None or rates is None:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –µ—ë —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    response = format_rates(date_text, rates)
    bot.send_message(message.chat.id, response)
    user_states[message.chat.id] = None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ –≤–∞–ª—é—Ç—É"
@bot.message_handler(func=lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –≤–∞–ª—é—Ç—É")
def handle_find_currency(message: types.Message):
    user_states[message.chat.id] = 'waiting_for_currency_input'
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã –∏–ª–∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: USD –∏–ª–∏ –î–æ–ª–ª–∞—Ä –°–®–ê.')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–ª—é—Ç—ã
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_currency_input')
def handle_currency_input(message: types.Message):
    currency_input = message.text.strip()
    date_text, rates = get_exchange_rates()
    response = search_currency(currency_input, date_text, rates)

    if "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in response:
        bot.send_message(message.chat.id, '–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    user_states[message.chat.id] = f'waiting_for_currency_date_{currency_input}'
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy. –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ 01.07.1992.\n–ü—Ä–∏–º–µ—Ä: 31.12.2023')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–ª—é—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤–∞–ª—é—Ç—ã
@bot.message_handler(func=lambda message: user_states.get(message.chat.id, '').startswith('waiting_for_currency_date_'))
def handle_currency_search_date_specific(message: types.Message):
    currency_input = user_states[message.chat.id].replace('waiting_for_currency_date_', '')
    date_input = message.text.strip()
    date_text, rates = get_exchange_rates_for_date(date_input)

    if date_text is None or rates is None:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –µ—ë —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        user_states[message.chat.id] = f'waiting_for_currency_date_{currency_input}'
        return

    response = search_currency(currency_input, date_text, rates)

    if "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in response:
        bot.send_message(message.chat.id, response + ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        user_states[message.chat.id] = f'waiting_for_currency_date_{currency_input}'
    else:
        bot.send_message(message.chat.id, response)
        user_states[message.chat.id] = None


bot.polling()
